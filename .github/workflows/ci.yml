name: CI

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  test:
    name: Build & Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Emit Axiom ci_start
        if: ${{ secrets.AXIOM_TOKEN != '' && secrets.AXIOM_DATASET != '' }}
        env:
          AXIOM_TOKEN: ${{ secrets.AXIOM_TOKEN }}
          AXIOM_DATASET: ${{ secrets.AXIOM_DATASET }}
          REPO: ${{ github.repository }}
          REF: ${{ github.ref_name }}
          SHA: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
          RUN_URL:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          JOB_NAME: Build & Test
          WORKFLOW: ${{ github.workflow }}
        run: |
          payload=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg sha "$SHA" \
            --arg actor "$ACTOR" --arg url "$RUN_URL" --arg job "$JOB_NAME" --arg wf "$WORKFLOW" \
            '{ts:(now|toiso8601), level:"INFO", message:"ci_start", app:"techub", job:$job, workflow:$wf, repo:$repo, ref:$ref, sha:$sha, actor:$actor, run_url:$url}')
          curl -sfS https://api.axiom.co/v1/datasets/$AXIOM_DATASET/ingest \
            -H "Authorization: Bearer $AXIOM_TOKEN" -H "Content-Type: application/json" -d "[$payload]"

      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install Node dependencies (cached)
        run: |
          if [ -f package-lock.json ]; then
            npm ci --no-fund --no-audit --loglevel=error
          else
            npm install --no-fund --no-audit --loglevel=error
          fi

      - name: Run CI script (silent)
        env:
          DISABLE_PARALLEL_TESTS: '1'
        run: |
          CI_SILENT=1 bin/ci

      - name: Emit Axiom ci_success
        if: ${{ success() && secrets.AXIOM_TOKEN != '' && secrets.AXIOM_DATASET != '' }}
        env:
          AXIOM_TOKEN: ${{ secrets.AXIOM_TOKEN }}
          AXIOM_DATASET: ${{ secrets.AXIOM_DATASET }}
          REPO: ${{ github.repository }}
          REF: ${{ github.ref_name }}
          SHA: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
          RUN_URL:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          JOB_NAME: Build & Test
          WORKFLOW: ${{ github.workflow }}
        run: |
          payload=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg sha "$SHA" \
            --arg actor "$ACTOR" --arg url "$RUN_URL" --arg job "$JOB_NAME" --arg wf "$WORKFLOW" \
            '{ts:(now|toiso8601), level:"INFO", message:"ci_success", app:"techub", job:$job, workflow:$wf, repo:$repo, ref:$ref, sha:$sha, actor:$actor, run_url:$url}')
          curl -sfS https://api.axiom.co/v1/datasets/$AXIOM_DATASET/ingest \
            -H "Authorization: Bearer $AXIOM_TOKEN" -H "Content-Type: application/json" -d "[$payload]"

      - name: Emit Axiom ci_failed
        if: ${{ failure() && secrets.AXIOM_TOKEN != '' && secrets.AXIOM_DATASET != '' }}
        env:
          AXIOM_TOKEN: ${{ secrets.AXIOM_TOKEN }}
          AXIOM_DATASET: ${{ secrets.AXIOM_DATASET }}
          REPO: ${{ github.repository }}
          REF: ${{ github.ref_name }}
          SHA: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
          RUN_URL:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          JOB_NAME: Build & Test
          WORKFLOW: ${{ github.workflow }}
        run: |
          payload=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg sha "$SHA" \
            --arg actor "$ACTOR" --arg url "$RUN_URL" --arg job "$JOB_NAME" --arg wf "$WORKFLOW" \
            '{ts:(now|toiso8601), level:"ERROR", message:"ci_failed", app:"techub", job:$job, workflow:$wf, repo:$repo, ref:$ref, sha:$sha, actor:$actor, run_url:$url}')
          curl -sfS https://api.axiom.co/v1/datasets/$AXIOM_DATASET/ingest \
            -H "Authorization: Bearer $AXIOM_TOKEN" -H "Content-Type: application/json" -d "[$payload]"

      - name: Axiom doctor (main only, if secrets)
        if:
          github.ref == 'refs/heads/main' && secrets.AXIOM_TOKEN != '' && secrets.AXIOM_DATASET !=
          ''
        env:
          AXIOM_TOKEN: ${{ secrets.AXIOM_TOKEN }}
          AXIOM_DATASET: ${{ secrets.AXIOM_DATASET }}
          AXIOM_ENABLED: '1'
          AXIOM_DEBUG: '1'
        run: |
          bin/rails axiom:doctor

  docker:
    name: Docker Build & Smoke Test
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: |
          docker build -t techub:ci .

      - name: Smoke test
        run: |
          docker run --rm --entrypoint ./bin/rails techub:ci --version

      - name: Prepare SBOM directory
        run: |
          mkdir -p sbom

      - name: Generate SBOM (CycloneDX) for image
        uses: anchore/sbom-action@v0
        with:
          image: techub:ci
          format: cyclonedx-json
          output-file: sbom/sbom-techub-image.cdx.json
          upload-artifact: true
          artifact-name: sbom-techub-image.cdx.json

      - name: SBOM sanity check
        run: |
          test -s sbom/sbom-techub-image.cdx.json
          jq -e '.bomFormat=="CycloneDX" and (.components|length)>=1' sbom/sbom-techub-image.cdx.json

      - name: Resolve image digest for attestation
        id: digest
        run: |
          ref=$(docker inspect --format='{{index .RepoDigests 0}}' techub:ci)
          name="${ref%%@*}"
          digest="${ref##*@}"
          echo "name=$name" >> "$GITHUB_OUTPUT"
          echo "digest=$digest" >> "$GITHUB_OUTPUT"

      - name: Emit Axiom ci_image_built
        if: ${{ secrets.AXIOM_TOKEN != '' && secrets.AXIOM_DATASET != '' }}
        env:
          AXIOM_TOKEN: ${{ secrets.AXIOM_TOKEN }}
          AXIOM_DATASET: ${{ secrets.AXIOM_DATASET }}
          REPO: ${{ github.repository }}
          REF: ${{ github.ref_name }}
          SHA: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
          RUN_URL:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          IMAGE_NAME: ${{ steps.digest.outputs.name }}
          IMAGE_DIGEST: ${{ steps.digest.outputs.digest }}
        run: |
          payload=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg sha "$SHA" --arg actor "$ACTOR" --arg url "$RUN_URL" \
            --arg img "$IMAGE_NAME" --arg dig "$IMAGE_DIGEST" \
            '{ts:(now|toiso8601), level:"INFO", message:"ci_image_built", app:"techub", repo:$repo, ref:$ref, sha:$sha, actor:$actor, run_url:$url, image:{name:$img,digest:$dig}}')
          curl -sfS https://api.axiom.co/v1/datasets/$AXIOM_DATASET/ingest \
            -H "Authorization: Bearer $AXIOM_TOKEN" -H "Content-Type: application/json" -d "[$payload]"

      - name: Attest SBOM (GitHub attestations)
        uses: actions/attest-sbom@v1
        with:
          sbom-path: sbom/sbom-techub-image.cdx.json
          subject-name: ${{ steps.digest.outputs.name }}
          subject-digest: ${{ steps.digest.outputs.digest }}

      - name: Emit Axiom ci_sbom_attested
        if: ${{ success() && secrets.AXIOM_TOKEN != '' && secrets.AXIOM_DATASET != '' }}
        env:
          AXIOM_TOKEN: ${{ secrets.AXIOM_TOKEN }}
          AXIOM_DATASET: ${{ secrets.AXIOM_DATASET }}
          REPO: ${{ github.repository }}
          REF: ${{ github.ref_name }}
          SHA: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
          RUN_URL:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          IMAGE_NAME: ${{ steps.digest.outputs.name }}
          IMAGE_DIGEST: ${{ steps.digest.outputs.digest }}
        run: |
          payload=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg sha "$SHA" --arg actor "$ACTOR" --arg url "$RUN_URL" \
            --arg img "$IMAGE_NAME" --arg dig "$IMAGE_DIGEST" \
            '{ts:(now|toiso8601), level:"INFO", message:"ci_sbom_attested", app:"techub", repo:$repo, ref:$ref, sha:$sha, actor:$actor, run_url:$url, image:{name:$img,digest:$dig}}')
          curl -sfS https://api.axiom.co/v1/datasets/$AXIOM_DATASET/ingest \
            -H "Authorization: Bearer $AXIOM_TOKEN" -H "Content-Type: application/json" -d "[$payload]"

      - name: Emit Axiom ci_docker_failed
        if: ${{ failure() && secrets.AXIOM_TOKEN != '' && secrets.AXIOM_DATASET != '' }}
        env:
          AXIOM_TOKEN: ${{ secrets.AXIOM_TOKEN }}
          AXIOM_DATASET: ${{ secrets.AXIOM_DATASET }}
          REPO: ${{ github.repository }}
          REF: ${{ github.ref_name }}
          SHA: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
          RUN_URL:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          payload=$(jq -n \
            --arg repo "$REPO" --arg ref "$REF" --arg sha "$SHA" --arg actor "$ACTOR" --arg url "$RUN_URL" \
            '{ts:(now|toiso8601), level:"ERROR", message:"ci_docker_failed", app:"techub", repo:$repo, ref:$ref, sha:$sha, actor:$actor, run_url:$url}')
          curl -sfS https://api.axiom.co/v1/datasets/$AXIOM_DATASET/ingest \
            -H "Authorization: Bearer $AXIOM_TOKEN" -H "Content-Type: application/json" -d "[$payload]"

      - name: Upload SBOM to GitHub Release (tags only)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: sbom/sbom-techub-image.cdx.json
