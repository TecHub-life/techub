# Name of your application. Used to uniquely configure containers.
service: techub

# Name of the container image.
# Publish and pull the image from GitHub Container Registry
# NOTE: GHCR lower-cases org/repo names
image: ghcr.io/techub-life/techub

# Deploy to these servers.
servers:
  web:
    # Comma-separated list of IPs/hosts, e.g. "203.0.113.10,203.0.113.12"
    hosts: <%= ENV.fetch("WEB_HOSTS", "techub.life").split(",") %>
  job:
    # Defaults to WEB_HOSTS if JOB_HOSTS is not set
    hosts: <%= ENV.fetch("JOB_HOSTS", ENV.fetch("WEB_HOSTS", "techub.life")).split(",") %>
    cmd: bin/jobs start
    env:
      clear:
        ROLE: job

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  # Set your public hostname. Can be overridden by APP_HOST env; default points to production domain.
  host: <%= ENV.fetch("APP_HOST", "techub.life") %>

# Credentials for your image host.
registry:
  # Use GitHub Container Registry for images
  server: ghcr.io
  # Username for GHCR (your GitHub username or GitHub Actions actor)
  username: <%= ENV.fetch("REGISTRY_USERNAME", "loftwah") %>
  # Always use an access token rather than a real password; see .kamal/secrets
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - RESEND_API_KEY
  clear:
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    SOLID_QUEUE_IN_PUMA: true

    # Set number of processes dedicated to Solid Queue (default: 1)
    # JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Match this to any external database server to configure Active Record correctly
    # Use techub-db for a db accessory server on same machine via local kamal docker network.
    # DB_HOST: 192.168.0.2

    # Log everything from Rails
    # RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"

# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - 'techub_storage:/rails/storage'

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  args:
    RUBY_VERSION: 3.4.1
    RUBY_BASE: public.ecr.aws/docker/library/ruby
    RUBY_TAG: 3.4.1-slim
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY
# Use a different ssh user than root
# Use SSH config for auth (Host aliases like "techub-do" work).
# To force a user, set `SSH_USER` and add:
# ssh:
#   user: <%= ENV["SSH_USER"] %>

# Use accessory services (secrets come from .kamal/secrets).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     # Change to 3306 to expose port to the world instead of just local network.
#     port: "127.0.0.1:3306:3306"
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
